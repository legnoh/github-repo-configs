name: CI
on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request_target:
    branches: [main]
  schedule:
  - cron: 0 0 * * *

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform command
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Get prev run's ID
      id: prev-run
      run: |
        PREV_RUN_ID=$(gh run list --limit 100 \
          --json databaseId,conclusion,name \
          | jq -r "[.[] | select(.name==\"${{ github.workflow }}\" and .conclusion == \"success\") | .][0].databaseId"
        )
        echo "id=${PREV_RUN_ID}" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Download tfstate files
      uses: actions/download-artifact@v4
      with:
        name: tfstate
        github-token: ${{ github.token }}
        run-id: ${{ steps.prev-run.outputs.id }}

    - name: Decrypt tfstate files
      run: |
        openssl enc -d -aes256 -pbkdf2 -md sha-256 \
          -in terraform.tfstate.enc -out terraform.tfstate -pass env:PASSWORD
      env:
        PASSWORD: ${{ secrets.PASSWORD }}

    - name: Terraform fmt
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init

    - name: Get GitHub App Token(for all repositories)
      uses: actions/create-github-app-token@v1
      id: github-app
      with:
        app-id: ${{ vars.ADMIN_BOT_ID }}
        private-key: ${{ secrets.ADMIN_BOT_PRIVATEKEY }}
        owner: ${{ github.repository_owner }}

    - name: Prepare execution
      run: ./setup.sh
      env:
        GITHUB_TOKEN: ${{ steps.github-app.outputs.token }}

    - name: TF plan
      if: github.event_name == 'pull_request_target'
      run: terraform plan
      env:
        TF_VAR_GITHUB_OWNER: ${{ github.repository_owner }}
        GITHUB_OWNER: ${{ github.repository_owner }}
        GITHUB_TOKEN: ${{ steps.github-app.outputs.token }}
        TF_VAR_BUMP_BOT_ID: ${{ vars.BUMP_BOT_ID }}
        TF_VAR_BUMP_BOT_PRIVATEKEY: ${{ secrets.BUMP_BOT_PRIVATEKEY }}

    - name: TF apply
      if: github.event_name != 'pull_request_target'
      run: terraform apply -auto-approve
      env:
        TF_VAR_GITHUB_OWNER: ${{ github.repository_owner }}
        GITHUB_OWNER: ${{ github.repository_owner }}
        GITHUB_TOKEN: ${{ steps.github-app.outputs.token }}
        TF_VAR_BUMP_BOT_ID: ${{ vars.BUMP_BOT_ID }}
        TF_VAR_BUMP_BOT_PRIVATEKEY: ${{ secrets.BUMP_BOT_PRIVATEKEY }}

    - name: Encrypt tfstate files
      if: ${{ always() }}
      run: |
        openssl enc -aes256 -pbkdf2 -md sha-256 \
          -in terraform.tfstate -out terraform.tfstate.enc -pass env:PASSWORD
      env:
        PASSWORD: ${{ secrets.PASSWORD }}

    - name: Upload tfstate to artifact
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: tfstate
        path: terraform.tfstate.enc

    - name: Encrypt repodata files
      if: ${{ always() }}
      run: |
        tar -cf - tmp repos.auto.tfvars.json \
        | openssl enc -aes256 -pbkdf2 -md sha-256 \
          -out archive.tar.enc -pass env:PASSWORD
      env:
        PASSWORD: ${{ secrets.PASSWORD }}

    - name: Upload repodatas to artifact
      uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
        name: repodatas
        path: archive.tar.enc
